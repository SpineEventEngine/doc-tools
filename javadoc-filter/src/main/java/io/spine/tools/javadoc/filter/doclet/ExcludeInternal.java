/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.tools.javadoc.filter.doclet;

import com.google.common.collect.ObjectArrays;
import io.spine.annotation.Internal;
import jdk.javadoc.doclet.DocletEnvironment;
import jdk.javadoc.doclet.StandardDoclet;

import javax.lang.model.SourceVersion;
import java.util.spi.ToolProvider;

/**
 * Extension of {@linkplain StandardDoclet} doclet, which excludes
 * {@linkplain Internal}-annotated components.
 *
 * <p>Use it to generate documentation for audience, that should not know about
 * {@linkplain Internal}-annotated components.
 *
 * <p>Works by pre-processing a {@linkplain DocletEnvironment}.
 * The doclet creates new {@linkplain DocletEnvironment},
 * that does not contain {@linkplain Internal}-annotated components and further generates documents.
 *
 * <p>You can use the non-standard doclet by specifying the following Javadoc options:
 * <ul>
 *     <li>doclet io.spine.tools.javadoc.filter.doclet.ExcludeInternal;</li>
 *     <li>docletpath classpathlist (The path to the doclet starting class file).</li>
 * </ul>
 *
 * <p>Call it with Javadoc tool like this:
 * <pre> {@code javadoc -doclet io.spine.tools.javadoc.filter.doclet.ExcludeInternal
 * -docletpath "classpathlist" ...}</pre>
 *
 * <p>If everything done right, you will get the standard documentation generated by Javadoc tool,
 * except {@linkplain Internal}-annotated components.
 */
@SuppressWarnings("ExtendsUtilityClass")
public class ExcludeInternal extends StandardDoclet {
    @Override
    public String getName() {
        return this.getClass()
                   .getName();
    }

    @Override
    public boolean run(DocletEnvironment environment) {
        return super.run(new FilteringDocletEnvironment(environment));
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.RELEASE_11;
    }

    /**
     * Entry point for the Javadoc tool.
     *
     * @param args
     *         the command-line parameters
     */
    public static void main(String[] args) {
        var javadoc = ToolProvider.findFirst("javadoc")
                                  .orElseThrow();
        var argsWithDoclet= setDoclet(args);
        javadoc.run(System.out, System.err, argsWithDoclet);
    }

    private static String[] setDoclet(String[] args) {
        String name = ExcludeInternal.class.getName();
        var doclet = String.format("-doclet %s", name);
        return ObjectArrays.concat(doclet, args);
    }
}
